{
  "version": 3,
  "sources": ["../lib/nansumpw.js", "../lib/nanvariancepn.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var out = [ 0.0, 0 ];\n* var v = nansumpw( N, out, x, 2, 1 );\n* // returns [ 5.0, 4 ]\n*/\nfunction nansumpw( N, out, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn nansumpw( n, out, x, stride, ix ) + nansumpw( N-n, out, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = nansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nansumpw = require( './nansumpw.js' );\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancepn( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvariancepn( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Compute an estimate for the mean...\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tnansumpw( N, WORKSPACE, x, stride, ix );\n\tn = WORKSPACE[ 1 ];\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = WORKSPACE[ 0 ] / n;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nansumpw = require( './nansumpw.js' );\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanvariancepn( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancepn( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Compute an estimate for the mean...\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tnansumpw( N, WORKSPACE, x, stride, offset );\n\tn = WORKSPACE[ 1 ];\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = WORKSPACE[ 0 ] / n;\n\n\t// Compute the variance...\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanvariancepn = require( './nanvariancepn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanvariancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* @module @stdlib/stats-base-nanvariancepn\n*\n* @example\n* var nanvariancepn = require( '@stdlib/stats-base-nanvariancepn' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancepn( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanvariancepn = require( '@stdlib/stats-base-nanvariancepn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanvariancepn.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EAMnDC,EAAY,IAkChB,SAASC,EAAUC,EAAGC,EAAKC,EAAGC,EAAQC,EAAS,CAC9C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAb,EAAKD,EACAJ,EAAI,EAAI,CAIZ,IAFAe,EAAI,EACJC,EAAI,EACEE,EAAI,EAAGA,EAAIlB,EAAGkB,IACnBD,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVF,GAAKE,EACLD,GAAK,GAENX,GAAMF,EAEP,OAAAF,EAAK,CAAE,GAAKc,EACZd,EAAK,CAAE,GAAKe,EACLf,CACR,CACA,GAAKD,GAAKF,EAAY,CAarB,IAXAQ,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLG,EAAI,EAEJF,EAAId,EAAI,EACFkB,EAAI,EAAGA,EAAIlB,EAAEc,EAAGI,GAAK,EAC1BD,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVX,GAAMW,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVV,GAAMU,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVT,GAAMS,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVR,GAAMQ,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVP,GAAMO,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVN,GAAMM,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVL,GAAMK,EACND,GAAK,GAENX,GAAMF,EACNc,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVJ,GAAMI,EACND,GAAK,GAENX,GAAMF,EAMP,IAHAY,EAAMT,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGnCK,EAAGA,EAAIlB,EAAGkB,IACfD,EAAIf,EAAGG,CAAG,EACLY,IAAMA,IACVF,GAAKE,EACLD,GAAK,GAENX,GAAMF,EAEP,OAAAF,EAAK,CAAE,GAAKc,EACZd,EAAK,CAAE,GAAKe,EACLf,CACR,CAEA,OAAAe,EAAInB,EAAOG,EAAE,CAAE,EACfgB,GAAKA,EAAI,EACFjB,EAAUiB,EAAGf,EAAKC,EAAGC,EAAQE,CAAG,EAAIN,EAAUC,EAAEgB,EAAGf,EAAKC,EAAGC,EAAQE,EAAIW,EAAEb,CAAQ,CACzF,CAKAP,EAAO,QAAUG,ICvLjB,IAAAoB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,IAKXC,EAAY,CAAE,EAAK,CAAE,EA6BzB,SAASC,EAAeC,EAAGC,EAAYC,EAAGC,EAAS,CAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAO,EAAIR,EAAG,CAAE,EACJQ,IAAMA,GAAKV,EAAEC,EAAa,EACvB,EAED,IAaR,GAXKE,EAAS,EACbE,GAAM,EAAEL,GAAKG,EAEbE,EAAK,EAGNP,EAAW,CAAE,EAAI,EACjBA,EAAW,CAAE,EAAI,EACjBD,EAAUG,EAAGF,EAAWI,EAAGC,EAAQE,CAAG,EACtCM,EAAIb,EAAW,CAAE,EACjBS,EAAKI,EAAIV,EACJM,GAAM,EACV,MAAO,KAOR,IALAH,EAAKN,EAAW,CAAE,EAAIa,EAGtBL,EAAK,EACLE,EAAI,EACEI,EAAI,EAAGA,EAAIZ,EAAGY,IACnBF,EAAIR,EAAGG,CAAG,EACLK,IAAMA,IACVD,EAAIC,EAAIN,EACRE,GAAMG,EAAIA,EACVD,GAAKC,GAENJ,GAAMF,EAEP,OAAQG,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,EAC5B,CAKAX,EAAO,QAAUG,IC/GjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,IAKXC,EAAY,CAAE,EAAK,CAAE,EAiCzB,SAASC,EAAeC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CAC1D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAQ,EAAIT,EAAGE,CAAO,EACTO,IAAMA,GAAKX,EAAEC,EAAa,EACvB,EAED,IAQR,GALAH,EAAW,CAAE,EAAI,EACjBA,EAAW,CAAE,EAAI,EACjBD,EAAUG,EAAGF,EAAWI,EAAGC,EAAQC,CAAO,EAC1CQ,EAAId,EAAW,CAAE,EACjBU,EAAKI,EAAIX,EACJO,GAAM,EACV,MAAO,KAQR,IANAH,EAAKP,EAAW,CAAE,EAAIc,EAGtBN,EAAKF,EACLG,EAAK,EACLE,EAAI,EACEI,EAAI,EAAGA,EAAIb,EAAGa,IACnBF,EAAIT,EAAGI,CAAG,EACLK,IAAMA,IACVD,EAAIC,EAAIN,EACRE,GAAMG,EAAIA,EACVD,GAAKC,GAENJ,GAAMH,EAEP,OAAQI,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,EAC5B,CAKAZ,EAAO,QAAUG,IC/GjB,IAAAe,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAgB,IAChBC,EAAU,IAKdF,EAAaC,EAAe,UAAWC,CAAQ,EAK/CH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_nansumpw", "__commonJSMin", "exports", "module", "floor", "BLOCKSIZE", "nansumpw", "N", "out", "x", "stride", "offset", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "s", "n", "v", "i", "require_nanvariancepn", "__commonJSMin", "exports", "module", "nansumpw", "WORKSPACE", "nanvariancepn", "N", "correction", "x", "stride", "mu", "ix", "M2", "nc", "M", "d", "v", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "nansumpw", "WORKSPACE", "nanvariancepn", "N", "correction", "x", "stride", "offset", "mu", "ix", "M2", "nc", "M", "d", "v", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "nanvariancepn", "ndarray", "main"]
}
